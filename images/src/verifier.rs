extern crate clap;
use clap::{command, Parser};

use gevulot_shim::{Task, TaskResult};

type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;

#[derive(Debug, Parser, Default)]
#[command(about, version, no_binary_name(true))]
struct Cli {

    #[arg(short, long = "proof_file", default_value = "/workspace/lr_chunk_0/lr_proof.bin")]
    proof_file: String,
    #[arg(short, long = "circom_file", default_value = "/workspace/lr_chunk_0.circom")]
    circom_file: String,
    
}

fn main()-> Result<()>  {
   gevulot_shim::run(run_task)
}

fn run_task(task: Task) -> Result<TaskResult> {

    //env_logger::init();
    println!("verifier : task.args: {:?}", &task.args);
    let args =  Cli::parse_from(&task.args);
      
    //Rhe verifier does nothing. 
    //return  the files generated by the prover  to the gevulot's client.
    task.result(vec![1,2,3], vec![String::from(&args.circom_file),String::from(&args.proof_file),String::from("/workspace/debug.log")])

}
