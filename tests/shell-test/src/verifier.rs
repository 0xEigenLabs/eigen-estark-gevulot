extern crate clap;

use gevulot_shim::{Task, TaskResult};

type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;

fn main() -> Result<()> {
    gevulot_shim::run(run_task)
}

fn run_task(task: Task) -> Result<TaskResult> {
    //env_logger::init();
    println!("verifier : task.args: {:?}", &task.args);

    //In this test, the verifier does nothing.

    //return  the files generated by the prover  to the gevulot's client.
    task.result(
        vec![1, 2, 3, 4, 5, 6, 7, 8, 9],
        vec![
            String::from("/workspace/proof.json"),
            String::from("/workspace/stark_verfier.circom"),
            String::from("/workspace/test.log"),
        ],
    )
}
